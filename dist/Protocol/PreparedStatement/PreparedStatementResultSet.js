import{readField as e}from"../Data/Field.js";import{FieldFlags as r,FieldTypes as s}from"../Enumerations.js";import{BufferConsumer as t}from"../../Utils/BufferConsumer.js";import{getNullPositions as i}from"../../Utils/BufferUtil.js";import{toNumber as n}from"../../Utils/NumberUtil.js";export class PreparedStatementResultSet{#e;#r;constructor(e){this.#r=new t(e),this.fieldsCount=Number(this.#r.readIntEncoded())}getFields(){if(void 0===this.#e){this.#e=[];for(let r=0;r<this.fieldsCount;r++)this.#e.push(e(this.#r))}return this.#e}*getRows(){let e=this.getFields(),t=e.length;for(;!this.#r.consumed();){let f={};this.#r.skip(1);let u=i(this.#r.slice(Math.floor((this.fieldsCount+7+2)/8)),t,2);for(let i=0;i<t;i++){let t=e[i];if(u.includes(i)){f[t.name]=null;continue}switch(t.type){case s.INT:f[t.name]=(t.flags&r.UNSIGNED)===r.UNSIGNED?this.#r.readUInt(4):this.#r.readInt(4);break;case s.SMALLINT:f[t.name]=(t.flags&r.UNSIGNED)===r.UNSIGNED?this.#r.readUInt(2):this.#r.readInt(2);break;case s.TINYINT:f[t.name]=(t.flags&r.UNSIGNED)===r.UNSIGNED?this.#r.readUInt():this.#r.readInt();break;case s.DECIMAL:f[t.name]=n(this.#r.readStringEncoded().toString());break;case s.VARCHAR:f[t.name]=this.#r.readStringEncoded().toString();break;case s.BLOB:case s.LONGBLOB:f[t.name]=this.#r.readStringEncoded();break;case s.BIGINT:f[t.name]=n((t.flags&r.UNSIGNED)===r.UNSIGNED?this.#r.readUBigInt():this.#r.readBigInt());break;case s.DATETIME:f[t.name]=this.#r.readDatetimeEncoded();break;case s.TIME:f[t.name]=this.#r.readTimeEncoded()}}yield f}}}